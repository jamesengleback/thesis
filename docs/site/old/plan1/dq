DOT(1)                            General Commands Manual                            DOT(1)

NNAAMMEE
       dot - filter for drawing directed graphs
       neato - filter for drawing undirected graphs
       twopi - filter for radial layouts of graphs
       circo - filter for circular layout of graphs
       fdp - filter for drawing undirected graphs
       sfdp - filter for drawing large undirected graphs
       patchwork - filter for squarified tree maps
       osage - filter for array-based layouts

SSYYNNOOPPSSIISS
       ddoott [_o_p_t_i_o_n_s] [files]
       nneeaattoo [_o_p_t_i_o_n_s] [files]
       ttwwooppii [_o_p_t_i_o_n_s] [files]
       cciirrccoo [_o_p_t_i_o_n_s] [files]
       ffddpp [_o_p_t_i_o_n_s] [files]
       ssffddpp [_o_p_t_i_o_n_s] [files]
       ppaattcchhwwoorrkk [_o_p_t_i_o_n_s] [files]
       oossaaggee [_o_p_t_i_o_n_s] [files]

DDEESSCCRRIIPPTTIIOONN
       These  are  a collection of programs for drawing graphs.  There is actually only one
       main program; the specific layout algorithms are implemented as plugins. Thus,  they
       largely share all of the same command-line options.

       _d_o_t  draws  directed  graphs.   It  works  well on directed acyclic graphs and other
       graphs that can be drawn as hierarchies or have a natural ``flow.''

       _n_e_a_t_o draws undirected graphs using a ``spring'' model and reducing the related  en‐
       ergy (see Kamada and Kawai, Information Processing Letters 31:1, April 1989).

       _t_w_o_p_i  draws  graphs using a radial layout (see G. Wills, Symposium on Graph Drawing
       GD'97, September, 1997).  Basically, one node is chosen as the center and put at the
       origin.  The remaining nodes are placed on a sequence of concentric circles centered
       about the origin, each a fixed radial distance from the previous circle.  All  nodes
       distance 1 from the center are placed on the first circle; all nodes distance 1 from
       a node on the first circle are placed on the second circle; and so forth.

       _c_i_r_c_o draws graphs using a circular layout (see Six and Tollis, GD  '99  and  ALENEX
       '99,  and  Kaufmann  and Wiese, GD '02.)  The tool identifies biconnected components
       and draws the nodes of the component on a circle. The block‐cutpoint  tree  is  then
       laid out using a recursive radial algorithm. Edge crossings within a circle are min‐
       imized by placing as many edges on the circle's perimeter as possible.  In  particu‐
       lar, if the component is outerplanar, the component will have a planar layout.  If a
       node belongs to multiple non‐trivial biconnected components,  the  layout  puts  the
       node  in  one  of them. By default, this is the first non‐trivial component found in
       the search from the root component.

       _f_d_p draws undirected graphs using a ``spring'' model. It relies on a  force‐directed
       approach  in the spirit of Fruchterman and Reingold (cf. Software‐Practice & Experi‐
       ence 21(11), 1991, pp. 1129‐1164).

       _s_f_d_p also draws undirected graphs using the ``spring'' model described above, but it
       uses a multi-scale approach to produce layouts of large graphs in a reasonably short
       time.

       _p_a_t_c_h_w_o_r_k draws the graph as a squarified treemap (see M. Bruls et al., ``Squarified
       treemaps'', Proc. Joint Eurographics and IEEE TCVG Symp. on Visualization, 2000, pp.
       33-42). The clusters of the graph are used to specify the tree.

       _o_s_a_g_e draws the graph using its cluster structure. For a given cluster, each of  its
       subclusters is laid out internally.  Then the subclusters, plus any remaining nodes,
       are repositioned based on the cluster's ppaacckk and ppaacckkmmooddee attributes.

OOUUTTPPUUTT FFOORRMMAATTSS
       Graphviz uses an extensible plugin mechanism for its output  renderers,  so  to  see
       what  output  formats  your installation of dot supports you can use ``dot -T:'' and
       check the warning message.  Also, The plugin mechanism supports multiple implementa‐
       tions  of  the  output formats, allowing variations in the renderers and formatters.
       To see what variants are available for a particular output format, use, for example:
       ``dot -Tpng:'' and to force a particular variant, use, for example: ``dot -Tpng:gd''

       Traditionally, Graphviz supports the following:
       --TTddoott (Dot format containing layout information),
       --TTxxddoott (Dot format containing complete layout information),
       --TTppss (PostScript),
       --TTppddff (PDF),
       --TTssvvgg --TTssvvggzz (Structured Vector Graphics),
       --TTffiigg (XFIG graphics),
       --TTppnngg (png bitmap graphics),
       --TTggiiff (gif bitmap graphics),
       --TTjjppgg --TTjjppeegg (jpeg bitmap graphics),
       --TTjjssoonn (xdot information encoded in JSON),
       --TTiimmaapp  (imagemap  files for httpd servers for each node or edge that has a non‐null
       hhrreeff attribute.),
       --TTccmmaappxx (client‐side imagemap for use in html and xhtml).
       Additional less common or more  special‐purpose  output  formats  can  be  found  at
       https://www.graphviz.org/doc/info/output.html.

       Alternative  plugins  providing  support for a given output format can be found from
       the error message resulting from appending a ':' to  the  format.  e.g.  --TTppnngg::  The
       first plugin listed is always the default.

       The  --PP  switch  can  be used to produce a graph of all output variants supported by
       plugins in the local installation of graphviz.

GGRRAAPPHH FFIILLEE LLAANNGGUUAAGGEE
       Here is a synopsis of the graph file language, normally using the extension ..ggvv, for
       graphs:

       [ssttrriicctt] (ggrraapphh|ddiiggrraapphh) _n_a_m_e { _s_t_a_t_e_m_e_n_t_‐_l_i_s_t }
       is  the top‐level graph. If the graph is ssttrriicctt, then multiple edges are not allowed
       between the same pairs of nodes.  If it is a directed graph, indicated  by  ddiiggrraapphh,
       then  the  _e_d_g_e_o_p must be "->". If it is an undirected ggrraapphh then the _e_d_g_e_o_p must be
       "--".

       Statements may be:

       _n_a_m_e==_v_a_l;;
       nnooddee [[_n_a_m_e==_v_a_l]];;
       eeddggee [[_n_a_m_e==_v_a_l]];;
       Set default graph, node, or edge attribute _n_a_m_e to _v_a_l.  Any subgraph, node, or edge
       appearing after this inherits the new default attributes.

       nn00  [[_n_a_m_e_0_=_v_a_l_0_,_n_a_m_e_1_=_v_a_l_1_,_._._.]];;  Creates node nn00 (if it does not already exist) and
       sets its attributes according to the optional list.

       nn00 _e_d_g_e_o_p n1 _e_d_g_e_o_p _._._. _e_d_g_e_o_p nn [_n_a_m_e_0_=_v_a_l_0_,_n_a_m_e_1_=_v_a_l_1_,_._._.]];;
       Creates edges between nodes nn00, nn11, ..., nnnn and sets their attributes  according  to
       the optional list.  Creates nodes as necessary.

       [ssuubbggrraapphh _n_a_m_e]] {{ _s_t_a_t_e_m_e_n_t_‐_l_i_s_t }}
       Creates  a  subgraph.   Subgraphs  may  be used in place of nn00, ..., nnnn in the above
       statements to create edges.  [ssuubbggrraapphh _n_a_m_e] is optional; if missing,  the  subgraph
       is assigned an internal name.

       The language accepts both C‐style comments /*C...*/ or //...

       Attribute  names  and values are ordinary (C‐style) strings.  The following sections
       describe attributes that control graph layout.

       A   more   complete   description   of   the    language    can    be    found    at
       https://www.graphviz.org/doc/info/lang.html.

GGRRAAPPHH,, NNOODDEE AANNDD EEDDGGEE AATTTTRRIIBBUUTTEESS
       Graphviz  uses  the  _n_a_m_e=_v_a_l_u_e attributes, attached to graphs, subgraphs, nodes and
       edges, to tailor the layout and rendering. We list the more prominent attributes be‐
       low. The complete list is available at https://www.graphviz.org/doc/info/attrs.html.

  AAttttrriibbuutteess CCoommmmoonn ttoo NNooddeess,, EEddggeess,, CClluusstteerrss aanndd GGrraapphhss
       hhrreeff==_u_r_l  the default url for image map files; in PostScript files, the base URL for
       all relative URLs, as recognized by Acrobat Distiller 3.0 and up.

       UURRLL==_u_r_l (``URL'' is a synonym for ``href.'')

       ffoonnttccoolloorr==_c_o_l_o_r_v_a_l_u_e sets the label text color.

       A _c_o_l_o_r_v_a_l_u_e may be "_h_,_s_,_v"" (hue, saturation, brightness) floating point numbers be‐
       tween  0 and 1, or an X11 color name such as wwhhiittee,, bbllaacckk,, rreedd,, ggrreeeenn,, bblluuee,, yyeellllooww,,
       mmaaggeennttaa,, or ccyyaann, or a "_#_r_r_g_g_b_b_" _(_r_e_d_, _g_r_e_e_n_, _b_l_u_e_, _2 _h_e_x  _c_h_a_r_a_c_t_e_r_s  _e_a_c_h_)  _v_a_l_u_e_.
       _S_e_e             _h_t_t_p_s_:_/_/_w_w_w_._g_r_a_p_h_v_i_z_._o_r_g_/_d_o_c_/_i_n_f_o_/_a_t_t_r_s_._h_t_m_l_#_k_:_c_o_l_o_r             _a_n_d
       _h_t_t_p_s_:_/_/_w_w_w_._g_r_a_p_h_v_i_z_._o_r_g_/_d_o_c_/_i_n_f_o_/_c_o_l_o_r_s_._h_t_m_l _f_o_r _f_u_r_t_h_e_r _d_e_t_a_i_l_s_.

       ffoonnttssiizzee==_n sets the label type size to _n points.

       ffoonnttnnaammee==_n_a_m_e sets the label font family name.

       llaabbeell==_t_e_x_t where _t_e_x_t may include escaped newlines \n, \l, or \r for  center,  left,
       and  right  justified  lines.   The  string '\G' value will be replaced by the graph
       name.  For node labels, the string '\N' value will be replaced  by  the  node  name.
       For  edges,  if  the  substring '\T' is found in a label, it will be replaced by the
       name of the tail node; if the substring '\H' is found in a label,  it  will  be  re‐
       placed by the name of the head node; if the substring '\E' value is found in a label
       it    will    be    replaced    by:    _t_a_i_l___n_o_d_e___n_a_m_e->_h_e_a_d___n_o_d_e___n_a_m_e     or     by:
       _t_a_i_l___n_o_d_e___n_a_m_e--_h_e_a_d___n_o_d_e___n_a_m_e for undirected graphs.

       Graphviz  also  supports special HTML-like labels for constructing complex node con‐
       tent.      A      full‐description      of       these       is       given       at
       https://www.graphviz.org/doc/info/shapes.html#html.

       If a node has sshhaappee==rreeccoorrdd, the label may contain recursive box lists delimited by {
       | }.  Port identifiers in labels are set off by angle brackets < >.

  GGrraapphh AAttttrriibbuutteess
       ssiizzee==""_x_,_y"" specifies the maximum bounding box of drawing in inches.

       rraattiioo==_f sets the aspect ratio to _f which may be a floating point number, or  one  of
       the keywords ffiillll, ccoommpprreessss, or aauuttoo.

       llaayyoouutt==_e_n_g_i_n_e indicates the preferred layout engine (ddoott, nneeaattoo, ffddpp, etc.) overrid‐
       ing the default from the basename of the command or the -K commandline option.

       mmaarrggiinn==_f sets the page margin (included in the page size).

       oorrddeerriinngg==oouutt constrains order of out‐edges in a subgraph according to their file se‐
       quence.

       rroottaattee==9900  sets  landscape mode.  (oorriieennttaattiioonn==llaanndd is backward compatible but obso‐
       lete.)

       cceenntteerr==_n a non‐zero value centers the drawing on the page.

       ccoolloorr==_c_o_l_o_r_v_a_l_u_e sets foreground color (bbggccoolloorr for background).

       oovveerrllaapp==_m_o_d_e. This specifies what algorithm should do if any nodes overlap. If  mode
       is  ffaallssee,  the  program  uses  the Prism algorithm to adjust the nodes to eliminate
       overlaps. If mode is ssccaallee, the layout  is  uniformly  scaled  up,  preserving  node
       sizes,  until  nodes  no longer overlap. The latter technique removes overlaps while
       preserving symmetry and structure, while the former removes overlaps more  compactly
       but  destroys  symmetries.  If mode is ttrruuee (the default), no repositioning is done.
       Since the ddoott algorithm always produces a layout with no node overlaps, this  attri‐
       bute is only useful with other layouts.

       ssttyylleesshheeeett==_"_f_i_l_e_._c_s_s_"  includes a reference to a stylesheet in -Tsvg and -Tsvgz out‐
       puts.  Ignored by other formats.

       sspplliinneess If set to ttrruuee, edges are drawn as splines.  If set to ppoollyylliinnee,  edges  are
       drawn  as  polylines.  If set to oorrtthhoo, edges are drawn as orthogonal polylines.  In
       all of these cases, the nodes must not overlap.  If sspplliinneess==ffaallssee  or  sspplliinneess==lliinnee,
       edges  are  drawn  as line segments.  The default is ttrruuee for dot, and ffaallssee for all
       other layouts.

       ((ddoott‐‐ssppeecciiffiicc aattttrriibbuutteess))

       nnooddeesseepp==_f sets the minimum separation between nodes.

       rraannkksseepp==_f sets the minimum separation between ranks.

       rraannkkddiirr==LLRR||RRLL||BBTT requests a left‐to‐right, right‐to‐left, or bottom‐to‐top, drawing.

       rraannkk==ssaammee (or mmiinn or mmaaxx) in a subgraph constrains the rank assignment of its nodes.
       If  a subgraph's name has the prefix cclluusstteerr, its nodes are drawn in a distinct rec‐
       tangle of the layout.  Clusters may be nested.

       ((nneeaattoo‐‐ssppeecciiffiicc aattttrriibbuutteess))
       mmooddee==_v_a_l.  Algorithm for minimizing energy in the layout.  By  default,  nneeaattoo  uses
       stress majorization. If mmooddee==KKKK, it uses a version of gradient descent.

       mmooddeell==_v_a_l.  The nneeaattoo model computes the desired distances between all pairs of ver‐
       tices. By default, it uses the length of the shortest path. If mmooddeell is set to  cciirr‐‐
       ccuuiitt,  a  circuit-resistance  model  is  used.  If mmooddeell is set to ssuubbsseett, it uses a
       model whereby the edge length is the number of nodes that are neighbors  of  exactly
       one of the edge's vertices.

       ssttaarrtt==_v_a_l.  Requests random initial placement and seeds the random number generator.
       If _v_a_l is not an integer, the process ID or current time is used as the seed.

       eeppssiilloonn==_n.  Sets the cutoff for the solver.  The default is 0.1.

       ((ttwwooppii‐‐ssppeecciiffiicc aattttrriibbuutteess))
       rroooott==_c_t_r. This specifies the node to be used as the center of  the  layout.  If  not
       specified,  _t_w_o_p_i  will randomly pick one of the nodes that are furthest from a leaf
       node, where a leaf node is a node of degree 1. If no leaf nodes exists, an arbitrary
       node is picked as center.

       rraannkksseepp==_v_a_l.  Specifies the radial distance in inches between the sequence of rings.
       The default is 0.75.

       ((cciirrccoo‐‐ssppeecciiffiicc aattttrriibbuutteess))
       rroooott==_n_o_d_e_n_a_m_e. Specifies the name of a node occurring in  the  root  block.  If  the
       graph  is  disconnected,  the  rroooott node attribute can be used to specify additional
       root blocks.

       mmiinnddiisstt==_v_a_l_u_e. Sets the minimum separation between all nodes. If not specified  then
       _c_i_r_c_o uses a default value of 1.0.

       ((ffddpp‐‐ssppeecciiffiicc aattttrriibbuutteess))
       KK==_v_a_l. Sets the default ideal node separation in the layout.

       mmaaxxiitteerr==_v_a_l. Sets the maximum number of iterations used to layout the graph.

       ssttaarrtt==_v_a_l. Adjusts the random initial placement of nodes with no specified position.
       If _v_a_l is an integer, it is used as the seed for the random  number  generator.   If
       _v_a_l  is not an integer, a random system‐generated integer, such as the process ID or
       current time, is used as the seed.

  NNooddee AAttttrriibbuutteess
       hheeiigghhtt==_d or wwiiddtthh==_d sets minimum height  or  width.   Adding  ffiixxeeddssiizzee==ttrruuee  forces
       these to be the actual size (text labels are ignored).

       sshhaappee==_b_u_i_l_t_i_n___p_o_l_y_g_o_n record epsf
       _b_u_i_l_t_i_n___p_o_l_y_g_o_n  can be such values as ppllaaiinntteexxtt,, eelllliippssee,, oovvaall,, cciirrccllee,, eegggg,, ttrriiaann‐‐
       ggllee,, bbooxx,, ddiiaammoonndd,, ttrraappeezziiuumm,, ppaarraalllleellooggrraamm,, hhoouussee,,  hheexxaaggoonn,,  ooccttaaggoonn,,  nnoottee,,  ttaabb,,
       bbooxx33dd,,  oorr  ccoommppoonneenntt,,, among others.  (Polygons are defined or modified by the fol‐
       lowing node attributes: rreegguullaarr, ppeerriipphheerriieess,  ssiiddeess,  oorriieennttaattiioonn,  ddiissttoorrttiioonn  and
       sskkeeww.)   eeppssff  uses  the  node's sshhaappeeffiillee attribute as the path name of an external
       EPSF file to be automatically loaded for the node shape.

       See https://www.graphviz.org/doc/info/shapes.html for a complete description of node
       shapes.

       ccoolloorr==_c_o_l_o_r_v_a_l_u_e  sets the outline color, and the default fill color if style=filled
       and ffiillllccoolloorr is not specified.

       ffiillllccoolloorr==_c_o_l_o_r_v_a_l_u_e sets the fill color when style=filled.  If not  specified,  the
       fillcolor when style=filled defaults to be the same as the outline color.

       ssttyyllee==ffiilllleedd ssoolliidd ddaasshheedd ddootttteedd bboolldd iinnvviiss

       xxllaabbeell==_"_t_e_x_t_" specifies a label that will be place near, but outside, of a node. The
       normal llaabbeell string is placed within the node shape.

       ttaarrggeett==_"_t_a_r_g_e_t_" is a target string for client‐side imagemaps and SVG, effective when
       nodes  have  a  URL.   The  target  string  is used to determine which window of the
       browser is used for the URL.  Setting it to "_graphviz" will open a new window if it
       doesn't  already  exist, or reuse it if it does.  If the target string is empty, the
       default, then no target attribute is included in the output.   The  substrings  '\N'
       and  '\G' are substituted in the same manner as for the node label attribute.  Addi‐
       tionally the substring '\L' is substituted with the node label string.

       ttoooollttiipp==_"_t_e_x_t_" is a tooltip string for client‐side imagemaps and SVG, effective when
       nodes  have  a URL.  The tooltip string defaults to be the same as the label string,
       but this attribute permits nodes without labels to still have tooltips thus  permit‐
       ting denser graphs.  The substrings '\N' and '\G' are substituted in the same manner
       as for the node label attribute.  Additionally the  substring  '\L'  is  substituted
       with the node label string.

       The following attributes apply only to polygon shape nodes:

       rreegguullaarr==_n  if  _n  is non‐zero then the polygon is made regular, i.e. symmetric about
       the x and y axis, otherwise the polygon takes on the  aspect  ratio  of  the  label.
       _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s  that  are  not already regular are made regular by this attribute.
       _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s that are already regular are not affected  (i.e.   they  cannot  be
       made asymmetric).

       ppeerriipphheerriieess==_n  sets  the  number  of periphery lines drawn around the polygon.  This
       value supersedes the number of periphery lines of _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s.

       ssiiddeess==_n sets the number of sides to the polygon. _n<3 results in  an  ellipse.   This
       attribute is ignored by _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s.

       oorriieennttaattiioonn==_f sets the orientation of the first apex of the polygon counterclockwise
       from the vertical, in degrees.  _f may be a floating point number.   The  orientation
       of labels is not affected by this attribute.  This attribute is added to the initial
       orientation of _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s_.

       ddiissttoorrttiioonn==_f sets the amount of broadening of the top and narrowing of the bottom of
       the  polygon (relative to its orientation).  Floating point values between -1 and +1
       are suggested.  This attribute is ignored by _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s.

       sskkeeww==_f sets the amount of right‐displacement of the top and left‐displacement of the
       bottom  of the polygon (relative to its orientation).  Floating point values between
       -1 and +1 are suggested.  This attribute is ignored by _b_u_i_l_t_i_n___p_o_l_y_g_o_n_s.

       ((cciirrccoo‐‐ssppeecciiffiicc aattttrriibbuutteess))
       rroooott==_t_r_u_e_/_f_a_l_s_e. This specifies that the block containing the given node be  treated
       as the root of the spanning tree in the layout.

       ((nneeaattoo‐‐ aanndd ffddpp‐‐ssppeecciiffiicc aattttrriibbuutteess))
       ppiinn==_v_a_l. If _v_a_l is ttrruuee, the node will remain at its initial position.

  EEddggee AAttttrriibbuutteess
       wweeiigghhtt==_v_a_l where _v_a_l is the cost of the edge.  For ddoott, weights must be non-negative
       integers.  Values greater than 1 tend to shorten the edge;  weight 0 flat edges  are
       ignored  for  ordering nodes.  In ttwwooppii, a weight of 0 will cause the edge to be ig‐
       nored in constructing the underlying spanning tree. For nneeaattoo  and  ffddpp,  a  heavier
       weight  will  put  more emphasis on the algorithm achieving an edge length closer to
       that specified by the edge's lleenn attribute.

       ssttyyllee==ssoolliidd ddaasshheedd ddootttteedd bboolldd iinnvviiss

       ccoolloorr==_c_o_l_o_r_v_a_l_u_e sets the line color for edges.

       ccoolloorr==_c_o_l_o_r_v_a_l_u_e_l_i_s_t a ':' separated list of _c_o_l_o_r_v_a_l_u_e creates parallel edges,  one
       edge for each color.

       ddiirr==ffoorrwwaarrdd bbaacckk bbootthh nnoonnee controls arrow direction.

       ttaaiillcclliipp,,hheeaaddcclliipp==ffaallssee disables endpoint shape clipping.

       ttaarrggeett==_"_t_e_x_t_"  is  a target string for client‐side imagemaps and SVG, effective when
       edges have a URL.  If the target string is empty, the default, then no target attri‐
       bute  is  included in the output.  The substrings '\T', '\H', '\E' and '\G' are sub‐
       stituted in the same manner as for the edge label attribute.  Additionally the  sub‐
       string '\L' is substituted with the edge label string.

       ttoooollttiipp==_"_t_e_x_t_"  is  a  tooltip string for client‐side imagemaps effective when edges
       have a URL.  The tooltip string defaults to be the same as the  edge  label  string.
       The  substrings  '\T', '\H', '\E' and '\G' are substituted in the same manner as for
       the edge label attribute.  Additionally the substring '\L' is substituted  with  the
       edge label string.

       aarrrroowwhheeaadd,,aarrrroowwttaaiill==nnoonnee,,  nnoorrmmaall,,  iinnvv,, ddoott,, ooddoott,, iinnvvddoott,, iinnvvooddoott,, tteeee,, eemmppttyy,, iinn‐‐
       vveemmppttyy,, ooppeenn,, hhaallffooppeenn,, ddiiaammoonndd,, ooddiiaammoonndd,, bbooxx,, oobbooxx,, ccrrooww.  Specifies the shape  of
       the glyph occurring where the edge touches the head or tail node, respectively. Note
       that this only specifies the shape. The ddiirr attribute determines whether or not  the
       glyph is drawn.

       aarrrroowwssiizzee==_v_a_l specifies a multiplicative scale factor for the size of the arrowhead.
       inv_length=6,inv_width=7,dot_radius=2)

       hheeaaddllaabbeell,,ttaaiillllaabbeell==_t_e_x_t for labels appearing near the head and  tail  nodes  of  an
       edge.   llaabbeellffoonnttccoolloorr,  llaabbeellffoonnttnnaammee, llaabbeellffoonnttssiizzee for head and tail labels.  The
       substrings '\T', '\H', '\E' and '\G' are substituted in the same manner as  for  the
       edge  label attribute.  Additionally the substring '\L' is substituted with the edge
       label string.

       hheeaaddhhrreeff==_"_u_r_l_" sets the url for the head port in imagemap, PostScript and SVG files.
       The  substrings  '\T', '\H', '\E' and '\G' are substituted in the same manner as for
       the edge label attribute.  Additionally the substring '\L' is substituted  with  the
       edge label string.

       hheeaaddUURRLL==_"_u_r_l_" (hheeaaddUURRLL is a synonym for hheeaaddhhrreeff.)

       hheeaaddttaarrggeett==_"_h_e_a_d_t_a_r_g_e_t_" is a target string for client‐side imagemaps and SVG, effec‐
       tive when edge heads have a URL.  The headtarget string is used to  determine  which
       window  of  the browser is used for the URL.  If the headtarget string is empty, the
       default, then headtarget defaults to the same value as target  for  the  edge.   The
       substrings  '\T',  '\H', '\E' and '\G' are substituted in the same manner as for the
       edge label attribute.  Additionally the substring '\L' is substituted with the  edge
       label string.

       hheeaaddttoooollttiipp==_"_t_o_o_l_t_i_p_"  is  a tooltip string for client‐side imagemaps effective when
       head ports have a URL.  The tooltip string defaults to be the same as the  headlabel
       string.   The  substrings '\T', '\H', and '\E' are substituted in the same manner as
       for the edge label attribute.  Additionally the substring '\L' is  substituted  with
       the edge label string.

       ttaaiillhhrreeff==_"_u_r_l_" sets the url for the tail port in imagemap, PostScript and SVG files.
       The substrings '\T', '\H', '\E' and '\G' are substituted in the same manner  as  for
       the  edge  label attribute.  Additionally the substring '\L' is substituted with the
       edge label string.

       ttaaiillUURRLL==_"_u_r_l_" (ttaaiillUURRLL is a synonym for ttaaiillhhrreeff.)

       ttaaiillttaarrggeett==_"_t_a_i_l_t_a_r_g_e_t_" is a target string for client‐side imagemaps and SVG, effec‐
       tive  when  edge tails have a URL.  The tailtarget string is used to determine which
       window of the browser is used for the URL.  If the tailtarget string is  empty,  the
       default,  then  tailtarget  defaults  to the same value as target for the edge.  The
       substrings '\T', '\H', '\E' and '\G' are substituted in the same manner as  for  the
       edge  label attribute.  Additionally the substring '\L' is substituted with the edge
       label string.

       ttaaiillttoooollttiipp==_"_t_o_o_l_t_i_p_" is a tooltip string for client‐side imagemaps  effective  when
       tail  ports have a URL.  The tooltip string defaults to be the same as the taillabel
       string.  The substrings '\T', '\H', '\E' and '\G' are substituted in the same manner
       as  for  the  edge  label attribute.  Additionally the substring '\L' is substituted
       with the edge label string.

       llaabbeellddiissttaannccee and llaabbeellaannggllee (in degrees CCW) specify the placement of head and tail
       labels.

       ddeeccoorraattee draws line from edge to label.

       ssaammeehheeaadd,,ssaammeettaaiill  aim edges having the same value to the same port, using the aver‐
       age landing point.

       ((ddoott‐‐ssppeecciiffiicc aattttrriibbuutteess))
       ccoonnssttrraaiinntt==ffaallssee causes an edge to be ignored for rank assignment.

       mmiinnlleenn==_n where _n is an integer factor that applies to the  edge  length  (ranks  for
       normal edges, or minimum node separation for flat edges).

       xxllaabbeell==_"_t_e_x_t_"  Edge  labels in ddoott are treated as special types of nodes, with space
       allocated for them during node layout. This can sometimes deform the  edge  routing.
       If  an  xxllaabbeell  is  used instead, the label is placed after all nodes and edges have
       been positioned. In turn, this may mean that there is some overlap among the labels.

       ((nneeaattoo aanndd ffddpp‐‐ssppeecciiffiicc aattttrriibbuutteess))
       lleenn==_f sets the optimal length of an edge.  The default is 1.0.

CCOOMMMMAANNDD‐‐LLIINNEE OOPPTTIIOONNSS
       --GG sets a default graph attribute.
       --NN sets a default node attribute.
       --EE sets a default edge attribute.  Example: --GGssiizzee==""77,,88"" --NNsshhaappee==bbooxx --EEffoonnttssiizzee==88

       --ll_f_i_l_e loads custom PostScript library files.  Usually these define custom shapes or
       styles.  If --ll is given by itself, the standard library is omitted.

       --TT_l_a_n_g sets the output language as described above.

       --nn[11|22]  (no‐op)  If  set,  neato assumes nodes have already been positioned and all
       nodes have a pos attribute giving the positions.  It then performs an  optional  ad‐
       justment  to  remove node‐node overlap, depending on the value of the overlap attri‐
       bute, computes the edge layouts, depending on the value of  the  sspplliinneess  attribute,
       and  emits  the  graph in the appropriate format.  If num is supplied, the following
       actions occur:
           num = 1
       Equivalent to -n.
           num > 1
       Use node positions as specified, with no adjustment to  remove  node‐node  overlaps,
       and  use any edge layouts already specified by the pos attribute.  neato computes an
       edge layout for any edge that does not have a ppooss attribute.  As usual, edge  layout
       is guided by the sspplliinneess attribute.

       --KK_l_a_y_o_u_t override the default layout engine implied by the command name.

       --OO  automatically  generate  output filenames based on the input filename and the -T
       format.

       --PP generate a graph of the currently available plugins.

       --vv (verbose) prints various information useful for debugging.

       --cc configure plugins.

       --mm memory test (observe no growth with top, kill when done).

       --qq_l_e_v_e_l set level of message suppression. The default is 1.

       --ss_f_s_c_a_l_e scale input by _f_s_c_a_l_e, the default is 72.

       --yy invert y coordinate in output.

       --oo_f_i_l_e write output to _f_i_l_e.

       --xx reduce graph.

       --LLgg don't use grid.

       --LLOO use old attractive force.

       --LLnn_i set number of iterations to _i.

       --LLUU_i set unscaled factor to _i.

       --LLCC_v set overlap expansion factor to _v.

       --LLTT[*]_v set temperature (temperature factor) to _v.

       --VV (version) prints version information and exits.

       --?? prints the usage and exits.

       A complete description of  the  available  command‐line  options  can  be  found  at
       https://www.graphviz.org/doc/info/command.html.

EEXXAAMMPPLLEESS
       digraph test123 {
               a -> b -> c;
               a -> {x y};
               b [shape=box];
               c [label="hello\nworld",color=blue,fontsize=24,
                    fontname="Palatino-Italic",fontcolor=red,style=filled];
               a -> z [label="hi", weight=100];
               x -> z [label="multi-line\nlabel"];
               edge [style=dashed,color=red];
               b -> x;
               {rank=same; b x}
       }

       graph test123 {
               a -- b -- c;
               a -- {x y};
               x -- c [w=10.0];
               x -- y [w=5.0,len=3];
       }

CCAAVVEEAATTSS
       Edge splines can overlap unintentionally.

       Flat edge labels are slightly broken.  Intercluster edge labels are totally broken.

       Because  unconstrained  optimization is employed, node boxes can possibly overlap or
       touch unrelated edges.  All existing spring embedders seem to have this limitation.

       Apparently reasonable attempts to pin nodes or adjust edge lengths and  weights  can
       cause instability.

AAUUTTHHOORRSS
       Stephen C. North <north@research.att.com>
       Emden R. Gansner <erg@graphviz.org>
       John C. Ellson <ellson@research.att.com>
       Yifan Hu <yifanhu@yahoo.com>

       The bitmap driver (PNG, GIF etc) is by Thomas Boutell, <http://www.boutell.com/gd>

       The  Truetype  font renderer is from the Freetype Project (David Turner, Robert Wil‐
       helm,   and   Werner   Lemberg)   (who   can   be    contacted    at    freetype-de‐
       vel@lists.lrz-muenchen.de).

SSEEEE AALLSSOO
       This  man  page  contains  only  a  small  amount  of the information related to the
       Graphviz  layout  programs.  The  most  complete  information  can   be   found   at
       https://www.graphviz.org/documentation/,  especially in the on‐line reference pages.
       Most of these documents are also available in the _d_o_c and _d_o_c_/_i_n_f_o subtrees  in  the
       source and binary distributions.

       dotty(1)
       tcldot(n)
       xcolors(1)
       libcgraph(3)

       E.  R.  Gansner,  S. C. North,  K. P. Vo, "DAG ‐ A Program to Draw Directed Graphs",
       Software ‐ Practice and Experience 17(1), 1988, pp. 1047‐1062.
       E. R. Gansner, E. Koutsofios, S. C. North,  K. P. Vo, "A Technique for  Drawing  Di‐
       rected Graphs," IEEE Trans. on Soft. Eng. 19(3), 1993, pp. 214‐230.
       S.  North  and E. Koutsofios, "Applications of graph visualization", Graphics Inter‐
       face 94, pp. 234‐245.
       E. R. Gansner and E. Koutsofios and S. C. North, "Drawing Graphs with  dot,"  Avail‐
       able at https://www.graphviz.org/pdf/dotguide.pdf.
       S. C. North, "NEATO User's Manual".  Available https://www.graphviz.org/pdf/neatogu‐
       ide.pdf.
       E. R. Gansner and Y. Hu, "Efficient, Proximity-Preserving Node Overlap Removal",  J.
       Graph Algorithms Appl., 14(1) pp. 53‐74, 2010.

                                      12 January 2015                                DOT(1)
